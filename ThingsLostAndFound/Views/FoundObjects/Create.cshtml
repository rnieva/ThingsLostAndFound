@{string mapsKey = System.Configuration.ConfigurationManager.AppSettings["MapsKey"]; } @* Read the MapsKey value from a config file out of my project, so avoid to upload this inromation to GitHub*@

<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=@mapsKey"></script> 

@model ThingsLostAndFound.Models.FoundObject

@{
    ViewBag.Title = "Found Object Form";
}

<h2>Found Object</h2>


@using (Html.BeginForm("Create", "FoundObjects", FormMethod.Post, new { enctype = "multipart/form-data" })) //I have to put this for pass files to controller
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Create a report about an found object</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.UserIdreported, "UserIdreported", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("UserIdreported", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.UserIdreported, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.Category, new MultiSelectList(new[] { "Animals Pets", "Bags, Luggage", "Clothing", "Electronics", "Jewelry", "Toys", "Tickets", "Personal" }), "Select", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Brand, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Model, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Model, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SerialID, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.SerialID, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SerialID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Color, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Color, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Color, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Observations, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Observations, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Observations, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SecurityQuestion, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.SecurityQuestion, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SecurityQuestion, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-2">Picture</label>
                    <div class="col-md-10">
                        <input type="file" id="file" name="upload" />
                    </div>
                </div>

            </div>
            <div class="col-sm-6">
                    <h4>Location</h4>
                    <p></p>
                        <div id="map_canvas" style="height: 250px; width: 500px;"></div>
                    <p></p>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.MapLocation, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.MapLocation, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MapLocation, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.LocationObservations, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.LocationObservations, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.LocationObservations, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.CityTownRoad, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.CityTownRoad, new MultiSelectList(new[] { "City", "Town", "River", "Beach", "Forest", "Park", "Pub", "Restaurat", "Shop" }), "Select", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CityTownRoad, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create Report" class="btn btn-default" />
                    </div>
                </div>
            </div>
            }

            <div>
                @Html.ActionLink("Back to List", "Index")
            </div>

            @section Scripts {
                @Scripts.Render("~/bundles/jqueryval")
                <script type="text/javascript">
                    initMap()
                    var map;
                    var marker;

                    function initMap() {
                        var centerPosition = new google.maps.LatLng(55.942071, -3.200165);
                        var options = {
                            zoom: 11,
                            center: centerPosition,
                            mapTypeId: google.maps.MapTypeId.ROADMAP
                        };
                        map = new google.maps.Map($('#map_canvas')[0], options);
                        google.maps.event.addListener(map, 'click', function (event) {
                            addMarker(event.latLng);
                        });
                        if (navigator.geolocation) //center the map in user location
                        {
                            navigator.geolocation.getCurrentPosition(function (position) {
                                var pos = {
                                    lat: position.coords.latitude,
                                    lng: position.coords.longitude
                                };
                                map.setCenter(pos);
                            }, function () {
                                handleLocationError(true, infoWindow, map.getCenter());
                            });
                        } else {
                            // Browser doesn't support Geolocation
                            handleLocationError(false, infoWindow, map.getCenter());
                        }
                    }

                    function handleLocationError(browserHasGeolocation, infoWindow, pos) {
                        infoWindow.setPosition(pos);
                        infoWindow.setContent(browserHasGeolocation ?
                                              'Error: The Geolocation service failed.' :
                                              'Error: Your browser doesn\'t support geolocation.');
                    }

                    function addMarker(location) {
                        if (marker) {
                            //if marker already was created change positon
                        } else {
                            //create a marker
                            marker = new google.maps.Marker({
                                position: location,
                                map: map,
                                draggable: true
                            });
                        }
                        marker.setPosition(location);
                        var lat = marker.getPosition().lat().toFixed(6);
                        var lng = marker.getPosition().lng().toFixed(6);
                        var mapLocationForm = document.getElementById("MapLocation");
                        mapLocationForm.value = lat + "," + lng;


                        var geocoder = new google.maps.Geocoder;
                        var latlngStr = (mapLocationForm.value).split(',', 2);
                        geocodeLatLng(latlngStr, geocoder);
                    }

                    function geocodeLatLng(latlngStr, geocoder) { //get info from lat and lng
                        var AddressForm = document.getElementById('Address');
                        var LocationForm = document.getElementById('Location');
                        var ZipCodeForm = document.getElementById('ZipCode');
                        var latlng = { lat: parseFloat(latlngStr[0]), lng: parseFloat(latlngStr[1]) };
                        geocoder.geocode({ 'location': latlng }, function (results, status) {
                            if (status == google.maps.GeocoderStatus.OK) {
                                if (results[0]) {
                                    AddressForm.value = results[0].formatted_address;  //TODO: add if para controlar los resultados
                                    if (results[0].address_components[4]) {
                                        LocationForm.value = results[0].address_components[4].long_name;
                                    }
                                    if (results[0].address_components[7]) {
                                        ZipCodeForm.value = results[0].address_components[7].long_name;
                                    }
                                } else {
                                    window.alert('No results found');
                                    AddressForm.value = "";
                                    LocationForm.value = "";
                                    ZipCodeForm.value = "";
                                }
                            } else {
                                window.alert('Geocoder failed due to: ' + status);
                                AddressForm.value = "";
                                LocationForm.value = "";
                                ZipCodeForm.value = "";
                            }
                        });

                    }


                    // Add validation for uploaded file

                /*    function getNameFromPath(strFilepath) {
                        var objRE = new RegExp(/([^\/\\]+)$/);
                        var strName = objRE.exec(strFilepath);

                        if (strName == null) {
                            return null;
                        }
                        else {
                            return strName[0];
                        }
                    }

                    $(function () {
                        $("#file").change(function () {
                            var file = getNameFromPath($(this).val());
                            if (file != null) {
                                var extension = file.substr((file.lastIndexOf('.') + 1));
                                switch (extension) {
                                    case 'jpg':
                                    case 'png':
                                    case 'gif':
                                        flag = true;
                                        break;
                                    default:
                                        flag = false;
                                }
                            }
                            if (flag == false) {
                                $("#validationTxt").text("You can upload only jpg,png,gif extension file");
                                return false;
                            }
                            else {
                                //var size = GetFileSize('file');
                                //if (size > 3) {
                                //    $("#validationTxt").text("You can upload file up to 1 MB");
                                //}
                                //else {
                                //    $("#validationTxt").text("");
                                //}
                            }
                        });
                    }); */


                    //color

                </script>
            }
