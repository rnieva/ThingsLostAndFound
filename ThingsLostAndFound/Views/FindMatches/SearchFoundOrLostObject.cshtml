@model ThingsLostAndFound.Models.FoundObject
<html>
<body>
    @{
        ViewBag.Title = "SearchFoundOrLostObject";
        Layout = "~/Views/Shared/_Layout.cshtml";
        var selectedFo = "";
        var selectedLo = "";
        if (ViewBag.select != null)     //if the user selected Search from the main page Lost or Found Object, or if the user click in Search Menu Bar
        {
            if (ViewBag.select == "fo")
            {
                selectedFo = "FoundObject";
                selectedLo = "";
                <h2>Search an Found Object</h2>
            }
            else
            {
                selectedFo = "";
                selectedLo = "LostObject";
                <h2>Search an Lost Object</h2>
            }

        }
        else
        {
            <h2>Search an Object</h2>
        }
    }
    <hr />
    @using (Html.BeginForm("SearchFoundOrLostObject", "FindMatches", FormMethod.Post, new { onsubmit = "return validate();", name = "form" }))
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            <div class="row">
                <div class="col-sm-6">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    @{
                        if (ViewBag.select == null)
                        {
                            <div class="form-group">
                                @Html.Label("Have you?", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <select id="TypeObject" name="TypeObject" class="form-control">
                                        <option @selectedFo value="FoundObject">Found an Object</option>
                                        <option @selectedLo value="LostObject">Lost an Object</option>
                                    </select>
                                </div>
                            </div>
                        }
                        else
                        {
                            <input type="hidden" id="TypeObject" name="TypeObject" value="@selectedFo">
                        }
                    }
                    <div class="form-group">
                        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @*<div class="form-group">
                        @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                        </div>
                    </div>*@

                    <div class="form-group">
                        @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @*@Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control" } })*@
                            <input type="" name="Date" id="Date" value="" class="form-control">
                            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.Category, new MultiSelectList(new[] { "Animals Pets", "Bags, Luggage", "Clothing", "Electronics", "Jewelry", "Toys", "Tickets", "Personal" }), "Select", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Brand, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Model, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Model, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.SerialID, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.SerialID, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.SerialID, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Color, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="color" name="Color" id="Color" value="#FFFFFF" class="form-control">
                            @Html.ValidationMessageFor(model => model.Color, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Observations, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Observations, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Observations, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.LocationObservations, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.LocationObservations, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.LocationObservations, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.CityTownRoad, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.CityTownRoad, new MultiSelectList(new[] { "City", "Town", "River", "Beach", "Forest", "Park", "Pub", "Restaurat", "Shop" }), "Select", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CityTownRoad, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <hr />
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Search" class="btn btn-success" />
                </div>
            </div>
        </div>
                        }
    <hr>
    <h2>Show a location in the map</h2>
    <div>
        <form action="/MapObjects/MapFoundAndLostObjects">
            <b>Into a ZipCode or Address:</b>
            <input type="text" name="Target" id="Target" class = "form-control"><br />
            <br />
            <input type="submit" value="Show Map in this location" class="btn btn-success">
        </form>
    </div>
</body>
</html>

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/themes/smoothness/jquery-ui.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js"></script>

    <script type="text/javascript">
        function validate() {
            return true;
        }


        $(document).ready(function () {
            $("#Date").datepicker({
                //dateFormat: 'dd-mm-yy'  // if I use European format in Edit I get an error in the hosting by format date
            });
        });
</script>
}